import React, { useState, useEffect } from 'react';
import { API_GROUP } from '../api';
import { useNavigate, Link } from 'react-router-dom';
import axios from 'axios';
import { useSnackbar } from 'notistack';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faArrowLeft, faPlus, faEye, faEyeSlash, faCheck, faTimes, faTag, faUsers, faLock, faLockOpen, faUser, faKey, faArrowRight } from '@fortawesome/free-solid-svg-icons';
import './AddGroup.css';

const AddGroup = () => {
    // Form state variables
    const [groupName, setGroupName] = useState('');
    const [desc, setDesc] = useState('');
    const [tags, setTags] = useState([]);
    const [tagInput, setTagInput] = useState('');
    const [groupId, setGroupId] = useState('');
    const [type, setType] = useState(0); // 0: public, 1: private
    const [passkey, setPasskey] = useState('');
    const [adminName, setAdminName] = useState('');
    const [adminPassword, setAdminPassword] = useState('');
    const [confirmAdminPassword, setConfirmAdminPassword] = useState('');
    
    // UI state variables
    const [activeStep, setActiveStep] = useState(0);
    const [errors, setErrors] = useState({});
    const [isLoading, setIsLoading] = useState(false);
    const [showPassword, setShowPassword] = useState(false);
    const [showAdminPassword, setShowAdminPassword] = useState(false);
    const [autoGeneratedId, setAutoGeneratedId] = useState('');

    const navigate = useNavigate();
    const { enqueueSnackbar } = useSnackbar();
    
    // Generate a group ID suggestion based on the group name
    useEffect(() => {
        if (groupName && !groupId) {
            const suggested = groupName
                .toLowerCase()
                .replace(/[^a-z0-9\s]/g, '')
                .replace(/\s+/g, '_');
            setAutoGeneratedId(suggested);
        }
    }, [groupName, groupId]);

    // Function to add a new group
    const addGroup = async (groupData) => {
        try {
            const response = await axios.post(`${API_GROUP}/add-group`, groupData);
            return response.data;
        } catch (error) {
            console.error("Error adding group:", error);
            throw error; // Re-throw to handle it in the calling function
        }
    };

    // Form steps configuration
    const steps = [
        { title: 'Basic Information', description: 'Group name and description' },
        { title: 'Group Settings', description: 'Group ID, type, and tags' },
        { title: 'Admin Setup', description: 'Admin account details' },
        { title: 'Review', description: 'Review and create group' }
    ];

    // Validation for multiple fields
    const validateField = (field, value) => {
        switch (field) {
            case 'groupName':
                if (!value.trim()) return 'Group name is required';
                if (value.length < 3) return 'Group name must be at least 3 characters';
                if (value.length > 50) return 'Group name cannot exceed 50 characters';
                if (!/^[a-zA-Z0-9\s]+$/.test(value)) return 'Group name can only contain letters, numbers, and spaces';
                return '';
            case 'desc':
                if (value && value.length > 500) return 'Description cannot exceed 500 characters';
                return '';
            case 'groupId':
                if (!value.trim()) return 'Group ID is required';
                if (value.length < 3) return 'Group ID must be at least 3 characters';
                if (value.length > 30) return 'Group ID cannot exceed 30 characters';
                if (!/^[a-z0-9_]+$/.test(value)) return 'Group ID can only contain lowercase letters, numbers, and underscores';
                if (!/[a-z]/.test(value)) return 'Group ID must contain at least one lowercase letter';
                return '';
            case 'passkey':
                if (type === 1 && !value.trim()) return 'Passkey is required for private groups';
                if (value && value.length < 4) return 'Passkey must be at least 4 characters';
                if (value && value.length > 20) return 'Passkey cannot exceed 20 characters';
                return '';
            case 'adminName':
                if (!value.trim()) return 'Admin name is required';
                if (value.length < 3) return 'Admin name must be at least 3 characters';
                if (value.length > 30) return 'Admin name cannot exceed 30 characters';
                if (!/^[a-zA-Z0-9_]+$/.test(value)) return 'Admin name can only contain letters, numbers, and underscores';
                return '';
            case 'adminPassword':
                if (!value.trim()) return 'Admin password is required';
                if (value.length < 6) return 'Admin password must be at least 6 characters';
                if (value.length > 50) return 'Admin password cannot exceed 50 characters';
                const hasUppercase = /[A-Z]/.test(value);
                const hasLowercase = /[a-z]/.test(value);
                const hasNumber = /[0-9]/.test(value);
                const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(value);
                
                if (!(hasUppercase && hasLowercase && hasNumber && hasSpecialChar)) {
                    return 'Password must include uppercase, lowercase, number, and special character';
                }
                return '';
            case 'confirmAdminPassword':
                if (value !== adminPassword) return 'Passwords do not match';
                return '';
            default:
                return '';
        }
    };
    
    // Multi-step form navigation
    const nextStep = () => {
        let newErrors = {};
        let hasErrors = false;
        
        // Validate current step fields
        if (activeStep === 0) {
            const groupNameError = validateField('groupName', groupName);
            const descError = validateField('desc', desc);
            
            if (groupNameError) {
                newErrors.groupName = groupNameError;
                hasErrors = true;
            }
            if (descError) {
                newErrors.desc = descError;
                hasErrors = true;
            }
        } else if (activeStep === 1) {
            const groupIdError = validateField('groupId', groupId);
            const passkeyError = validateField('passkey', passkey);
            
            if (groupIdError) {
                newErrors.groupId = groupIdError;
                hasErrors = true;
            }
            if (passkeyError) {
                newErrors.passkey = passkeyError;
                hasErrors = true;
            }
        } else if (activeStep === 2) {
            const adminNameError = validateField('adminName', adminName);
            const adminPasswordError = validateField('adminPassword', adminPassword);
            const confirmPasswordError = validateField('confirmAdminPassword', confirmAdminPassword);
            
            if (adminNameError) {
                newErrors.adminName = adminNameError;
                hasErrors = true;
            }
            if (adminPasswordError) {
                newErrors.adminPassword = adminPasswordError;
                hasErrors = true;
            }
            if (confirmPasswordError) {
                newErrors.confirmAdminPassword = confirmPasswordError;
                hasErrors = true;
            }
        }
        
        setErrors(newErrors);
        
        if (!hasErrors && activeStep < steps.length - 1) {
            setActiveStep(prevStep => prevStep + 1);
        }
    };
    
    const prevStep = () => {
        if (activeStep > 0) {
            setActiveStep(prevStep => prevStep - 1);
        }
    };
    
    // Tag management functions
    const addTag = () => {
        const tag = tagInput.trim();
        if (tag && !tags.includes(tag)) {
            setTags([...tags, tag]);
            setTagInput('');
        }
    };
    
    const removeTag = (tagToRemove) => {
        setTags(tags.filter(tag => tag !== tagToRemove));
    };
    
    const handleTagInputKeyDown = (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            addTag();
        } else if (e.key === ',' && tagInput.trim()) {
            e.preventDefault();
            addTag();
        }
    };
    
    // Utility function to use auto-generated ID
    const useGeneratedId = () => {
        if (autoGeneratedId) {
            setGroupId(autoGeneratedId);
        }
    };

    const handleSubmit = async (e) => {
        if (e) e.preventDefault();
        
        // Validate all fields before submission
        let finalErrors = {};
        const fields = [
            { name: 'groupName', value: groupName },
            { name: 'desc', value: desc },
            { name: 'groupId', value: groupId },
            { name: 'passkey', value: passkey },
            { name: 'adminName', value: adminName },
            { name: 'adminPassword', value: adminPassword },
            { name: 'confirmAdminPassword', value: confirmAdminPassword }
        ];
        
        fields.forEach(field => {
            const error = validateField(field.name, field.value);
            if (error) finalErrors[field.name] = error;
        });
        
        if (Object.keys(finalErrors).length > 0) {
            setErrors(finalErrors);
            enqueueSnackbar('Please fix all errors before submitting', { variant: 'error' });
            return;
        }
        
        setIsLoading(true);
        
        try {
            const response = await addGroup({
                groupName,
                desc,
                tags: tags, // Now an array directly
                groupid: groupId,
                type,
                passkey: type === 1 ? passkey : '', // Only include passkey for private groups
                adminName,
                adminPassword,
            });
            
            setIsLoading(false);
            
            if (response.data && response.data.message) {
                enqueueSnackbar(response.data.message, { variant: 'success' });
            } else {
                enqueueSnackbar('Group created successfully!', { variant: 'success' });
            }
            
            // Reset form and navigate to home
            navigate('/');
        } catch (error) {
            setIsLoading(false);
            console.error("Error adding group:", error);
            
            // Handle errors
            if (error.response && error.response.data) {
                const errorMessage = error.response.data.error || error.response.data.message || "Failed to add group.";
                enqueueSnackbar(errorMessage, { variant: 'error' });
            } else {
                enqueueSnackbar("An unexpected error occurred. Please try again.", { variant: 'error' });
            }
        }
    };
    
    // Render each step of the form based on active step
    const renderStep = () => {
        switch (activeStep) {
            case 0: // Basic Information
                return (
                    <div className="form-step">
                        <div className="form-group">
                            <label htmlFor="groupName">
                                <FontAwesomeIcon icon={faUsers} /> Group Name
                                <span className="required">*</span>
                            </label>
                            <input
                                id="groupName"
                                type="text"
                                value={groupName}
                                onChange={(e) => setGroupName(e.target.value)}
                                className={errors.groupName ? 'error' : ''}
                                placeholder="My Awesome Group"
                            />
                            {errors.groupName && <div className="error-text">{errors.groupName}</div>}
                        </div>
                        
                        <div className="form-group">
                            <label htmlFor="desc">
                                <FontAwesomeIcon icon={faTag} /> Description
                            </label>
                            <textarea
                                id="desc"
                                value={desc}
                                onChange={(e) => {
                                    const value = e.target.value;
                                    if (value.length <= 500) {
                                        setDesc(value);
                                    }
                                }}
                                className={errors.desc ? 'error' : ''}
                                placeholder="What's this group about?"
                                rows={4}
                                maxLength={500}
                            />
                            {errors.desc && (
                                <div className="error-text">
                                    <FontAwesomeIcon icon={faTimes} /> {errors.desc}
                                </div>
                            )}
                            <div className="char-count">
                                {desc.length}/500
                            </div>
                        </div>
                    </div>
                );
                
            case 1: // Group Settings
                return (
                    <div className="form-step">
                        <div className="form-group">
                            <label htmlFor="groupId">
                                <FontAwesomeIcon icon={faKey} /> Group ID
                                <span className="required">*</span>
                            </label>
                            <div className="input-with-button">
                                <input
                                    id="groupId"
                                    type="text"
                                    value={groupId}
                                    onChange={(e) => setGroupId(e.target.value)}
                                    className={errors.groupId ? 'error' : ''}
                                    placeholder="my_group_id"
                                />
                                {autoGeneratedId && !groupId && (
                                    <button 
                                        type="button" 
                                        className="suggestion-button"
                                        onClick={useGeneratedId}
                                        title="Use suggested ID"
                                        aria-label={`Use suggested group ID: ${autoGeneratedId}`}
                                    >
                                        {autoGeneratedId}
                                    </button>
                                )}
                            </div>
                            {errors.groupId && (
                                <div className="error-text">
                                    <FontAwesomeIcon icon={faTimes} /> {errors.groupId}
                                </div>
                            )}
                            <div className="helper-text">This ID will be used in URLs and cannot be changed later</div>
                        </div>
                        
                        <div className="form-group">
                            <label>
                                <FontAwesomeIcon 
                                    icon={type === 0 ? faLockOpen : faLock} 
                                    className={`group-type-icon ${type === 0 ? 'text-success' : 'text-danger'}`}
                                /> 
                                Group Type
                            </label>
                            <div 
                                className="toggle-container" 
                                role="radiogroup" 
                                aria-label="Group Type Selection"
                            >
                                <span 
                                    className={`toggle-label ${type === 0 ? 'active' : ''}`}
                                    role="radio"
                                    aria-checked={type === 0}
                                    onClick={() => setType(0)}
                                >
                                    <FontAwesomeIcon icon={faLockOpen} /> Public
                                </span>
                                <label className="switch" aria-label="Toggle group type">
                                    <input
                                        type="checkbox"
                                        checked={type === 1}
                                        onChange={() => setType(type === 0 ? 1 : 0)}
                                        aria-checked={type === 1}
                                        role="switch"
                                    />
                                    <span className="slider round" aria-hidden="true"></span>
                                </label>
                                <span 
                                    className={`toggle-label ${type === 1 ? 'active' : ''}`}
                                    role="radio"
                                    aria-checked={type === 1}
                                    onClick={() => setType(1)}
                                >
                                    <FontAwesomeIcon icon={faLock} /> Private
                                </span>
                            </div>
                            <div className="helper-text">
                                {type === 0 
                                    ? "Public groups can be joined by anyone" 
                                    : "Private groups require a passkey to join"}
                            </div>
                        </div>
                        
                        {type === 1 && (
                            <div className="form-group passkey-group">
                                <label htmlFor="passkey">
                                    <FontAwesomeIcon icon={faKey} /> Passkey
                                    <span className="required">*</span>
                                </label>
                                <div className="input-with-button">
                                    <input
                                        id="passkey"
                                        type={showPassword ? "text" : "password"}
                                        value={passkey}
                                        onChange={(e) => setPasskey(e.target.value)}
                                        className={errors.passkey ? 'error' : ''}
                                        placeholder="Enter passkey"
                                    />
                                    <button
                                        type="button"
                                        className="toggle-password"
                                        onClick={() => setShowPassword(!showPassword)}
                                        aria-label={showPassword ? "Hide passkey" : "Show passkey"}
                                    >
                                        <FontAwesomeIcon icon={showPassword ? faEyeSlash : faEye} />
                                    </button>
                                </div>
                                {errors.passkey && (
                                    <div className="error-text">
                                        <FontAwesomeIcon icon={faTimes} /> {errors.passkey}
                                    </div>
                                )}
                            </div>
                        )}
                        
                        <div className="form-group">
                            <label htmlFor="tags">
                                <FontAwesomeIcon icon={faTag} /> Tags
                            </label>
                            <div className="tag-input-container">
                                <div className="tag-list">
                                    {tags.map((tag, index) => (
                                        <span key={index} className="tag">
                                            #{tag}
                                            <button 
                                                type="button" 
                                                onClick={() => removeTag(tag)}
                                                className="remove-tag"
                                                aria-label={`Remove tag ${tag}`}
                                            >
                                                <FontAwesomeIcon icon={faTimes} />
                                            </button>
                                        </span>
                                    ))}
                                </div>
                                <div className="input-with-button">
                                    <input
                                        type="text"
                                        value={tagInput}
                                        onChange={(e) => setTagInput(e.target.value)}
                                        onKeyDown={handleTagInputKeyDown}
                                        placeholder="Add tags (press Enter or comma)"
                                    />
                                    <button 
                                        type="button" 
                                        onClick={addTag}
                                        className="add-tag-btn"
                                        aria-label="Add tag"
                                    >
                                        <FontAwesomeIcon icon={faPlus} /> Add
                                    </button>
                                </div>
                            </div>
                            <div className="helper-text">Add relevant tags to help users find your group</div>
                        </div>
                    </div>
                );
                
            case 2: // Admin Setup
                return (
                    <div className="form-step">
                        <div className="form-group">
                            <label htmlFor="adminName">
                                <FontAwesomeIcon icon={faUser} /> Admin Username
                                <span className="required">*</span>
                            </label>
                            <input
                                id="adminName"
                                type="text"
                                value={adminName}
                                onChange={(e) => setAdminName(e.target.value)}
                                className={errors.adminName ? 'error' : ''}
                                placeholder="admin_username"
                            />
                            {errors.adminName && <div className="error-text">{errors.adminName}</div>}
                        </div>
                        
                        <div className="form-group">
                            <label htmlFor="adminPassword">
                                <FontAwesomeIcon icon={faKey} /> Admin Password
                                <span className="required">*</span>
                            </label>
                            <div className="password-input">
                                <input
                                    id="adminPassword"
                                    type={showAdminPassword ? "text" : "password"}
                                    value={adminPassword}
                                    onChange={(e) => setAdminPassword(e.target.value)}
                                    className={errors.adminPassword ? 'error' : ''}
                                    placeholder="Enter admin password"
                                />
                                <button
                                    type="button"
                                    className="toggle-password"
                                    onClick={() => setShowAdminPassword(!showAdminPassword)}
                                >
                                    <FontAwesomeIcon icon={showAdminPassword ? faEyeSlash : faEye} />
                                </button>
                            </div>
                            {errors.adminPassword && <div className="error-text">{errors.adminPassword}</div>}
                        </div>
                        
                        <div className="form-group">
                            <label htmlFor="confirmAdminPassword">
                                <FontAwesomeIcon icon={faCheck} /> Confirm Password
                                <span className="required">*</span>
                            </label>
                            <input
                                id="confirmAdminPassword"
                                type="password"
                                value={confirmAdminPassword}
                                onChange={(e) => setConfirmAdminPassword(e.target.value)}
                                className={errors.confirmAdminPassword ? 'error' : ''}
                                placeholder="Confirm admin password"
                            />
                            {errors.confirmAdminPassword && <div className="error-text">{errors.confirmAdminPassword}</div>}
                        </div>
                        
                        <div className="helper-text">
                            You'll need these credentials to manage your group later
                        </div>
                    </div>
                );
                
            case 3: // Review
                return (
                    <div className="form-step review-step">
                        <h3>Review Your Group Details</h3>
                        
                        <div className="review-section">
                            <h4>Basic Information</h4>
                            <div className="review-item">
                                <span className="review-label">Group Name:</span>
                                <span className="review-value">{groupName}</span>
                            </div>
                            <div className="review-item">
                                <span className="review-label">Description:</span>
                                <span className="review-value description">{desc || "(No description provided)"}</span>
                            </div>
                        </div>
                        
                        <div className="review-section">
                            <h4>Group Settings</h4>
                            <div className="review-item">
                                <span className="review-label">Group ID:</span>
                                <span className="review-value">{groupId}</span>
                            </div>
                            <div className="review-item">
                                <span className="review-label">Group Type:</span>
                                <span className="review-value">
                                    {type === 0 ? "Public" : "Private"}
                                    <FontAwesomeIcon 
                                        icon={type === 0 ? faLockOpen : faLock} 
                                        style={{ marginLeft: '8px' }} 
                                    />
                                </span>
                            </div>
                            {type === 1 && (
                                <div className="review-item">
                                    <span className="review-label">Passkey:</span>
                                    <span className="review-value">******* (Hidden for security)</span>
                                </div>
                            )}
                            <div className="review-item">
                                <span className="review-label">Tags:</span>
                                <span className="review-value">
                                    {tags.length > 0 ? (
                                        <div className="review-tags">
                                            {tags.map((tag, i) => (
                                                <span key={i} className="tag">#{tag}</span>
                                            ))}
                                        </div>
                                    ) : "(No tags added)"}
                                </span>
                            </div>
                        </div>
                        
                        <div className="review-section">
                            <h4>Admin Account</h4>
                            <div className="review-item">
                                <span className="review-label">Admin Username:</span>
                                <span className="review-value">{adminName}</span>
                            </div>
                            <div className="review-item">
                                <span className="review-label">Admin Password:</span>
                                <span className="review-value">******* (Hidden for security)</span>
                            </div>
                        </div>
                        
                        <div className="confirmation-text">
                            By clicking "Create Group", you confirm that all information is correct and you're ready to create your group.
                        </div>
                    </div>
                );
                
            default:
                return null;
        }
    };
    
    // Navigation buttons based on current step
    const renderNavButtons = () => {
        return (
            <div className="form-navigation">
                {activeStep > 0 && (
                    <button 
                        type="button" 
                        className="back-button" 
                        onClick={prevStep}
                        disabled={isLoading}
                        aria-label="Previous Step"
                    >
                        <FontAwesomeIcon icon={faArrowLeft} /> 
                        <span>Back</span>
                    </button>
                )}
                
                {activeStep < steps.length - 1 ? (
                    <button 
                        type="button" 
                        className="next-button" 
                        onClick={nextStep}
                        aria-label="Next Step"
                    >
                        <span>Next</span>
                        <FontAwesomeIcon icon={faArrowRight} />
                    </button>
                ) : (
                    <button 
                        type="button" 
                        className="submit-button" 
                        onClick={handleSubmit}
                        disabled={isLoading}
                        aria-label="Create Group"
                    >
                        {isLoading ? 'Creating...' : 'Create Group'}
                    </button>
                )}
            </div>
        );
    };

    return (
        <div className="add-group-container">
            <div className="add-group-header">
                <Link to="/" className="home-link">
                    <FontAwesomeIcon icon={faArrowLeft} /> Back to Groups
                </Link>
            </div>
            <h1>Create a New Group</h1>
            <div className="stepper">
                {steps.map((step, index) => (
                    <div 
                        key={index} 
                        className={`step 
                            ${activeStep === index ? 'active' : ''} 
                            ${activeStep > index ? 'completed' : ''}`}
                        role="button"
                        aria-label={`Step ${index + 1}: ${step.title}`}
                        tabIndex={0}
                    >
                        <div 
                            className="step-number" 
                            aria-hidden="true"
                        >
                            {index + 1}
                        </div>
                        <div className="step-content">
                            <div className="step-title">{step.title}</div>
                            <div className="step-description">{step.description}</div>
                        </div>
                    </div>
                ))}
            </div>
            
            <div className="add-group-form-container">
                <form className="add-group-form" onSubmit={(e) => e.preventDefault()}>
                    {renderStep()}
                    {renderNavButtons()}
                </form>
            </div>
        </div>
    );
};

export default AddGroup;
